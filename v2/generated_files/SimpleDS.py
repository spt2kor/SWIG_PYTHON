# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _SimpleDS
else:
    import _SimpleDS

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Singleton(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleDS.delete_Singleton

    def set(self, height=0, width=0):
        return _SimpleDS.Singleton_set(self, height, width)

    def show(self):
        return _SimpleDS.Singleton_show(self)

    @staticmethod
    def getInstance():
        return _SimpleDS.Singleton_getInstance()

    @staticmethod
    def destroyInstance():
        return _SimpleDS.Singleton_destroyInstance()

    @staticmethod
    def count():
        return _SimpleDS.Singleton_count()

# Register Singleton in _SimpleDS:
_SimpleDS.Singleton_swigregister(Singleton)

def Singleton_getInstance():
    return _SimpleDS.Singleton_getInstance()

def Singleton_destroyInstance():
    return _SimpleDS.Singleton_destroyInstance()

def Singleton_count():
    return _SimpleDS.Singleton_count()

class Shape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleDS.delete_Shape

    def __init__(self, *args):
        _SimpleDS.Shape_swiginit(self, _SimpleDS.new_Shape(*args))

    def copy(self, src):
        return _SimpleDS.Shape_copy(self, src)

    def show(self):
        return _SimpleDS.Shape_show(self)

    def setName(self, name):
        return _SimpleDS.Shape_setName(self, name)

    def getName(self):
        return _SimpleDS.Shape_getName(self)

    @staticmethod
    def classInfo():
        return _SimpleDS.Shape_classInfo()

# Register Shape in _SimpleDS:
_SimpleDS.Shape_swigregister(Shape)

def Shape_classInfo():
    return _SimpleDS.Shape_classInfo()

RED = _SimpleDS.RED
VERSION = _SimpleDS.VERSION
class Rectangle(Shape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimpleDS.delete_Rectangle

    def __init__(self, *args):
        _SimpleDS.Rectangle_swiginit(self, _SimpleDS.new_Rectangle(*args))

    def clone(self):
        return _SimpleDS.Rectangle_clone(self)

    def copy(self, src):
        return _SimpleDS.Rectangle_copy(self, src)

    def area(self):
        return _SimpleDS.Rectangle_area(self)

    def set(self, name=None, height=1, width=1):
        return _SimpleDS.Rectangle_set(self, name, height, width)

    def show(self):
        return _SimpleDS.Rectangle_show(self)

    @staticmethod
    def classInfo():
        return _SimpleDS.Rectangle_classInfo()

    def returnSelfRef(self):
        return _SimpleDS.Rectangle_returnSelfRef(self)

    def returnSelfPtr(self):
        return _SimpleDS.Rectangle_returnSelfPtr(self)

# Register Rectangle in _SimpleDS:
_SimpleDS.Rectangle_swigregister(Rectangle)
cvar = _SimpleDS.cvar

def Rectangle_classInfo():
    return _SimpleDS.Rectangle_classInfo()


def calculateArea(width, height):
    return _SimpleDS.calculateArea(width, height)

def passCharPtr(ptr):
    return _SimpleDS.passCharPtr(ptr)

def createRectangle(name=None, w=1, h=1):
    return _SimpleDS.createRectangle(name, w, h)

def Accumulate(data):
    return _SimpleDS.Accumulate(data)
class Algo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pub = property(_SimpleDS.Algo_pub_get, _SimpleDS.Algo_pub_set)

    def getPri(self):
        return _SimpleDS.Algo_getPri(self)

    def getPro(self):
        return _SimpleDS.Algo_getPro(self)

    def getPub(self):
        return _SimpleDS.Algo_getPub(self)
    __swig_destroy__ = _SimpleDS.delete_Algo

    def __init__(self, *args):
        _SimpleDS.Algo_swiginit(self, _SimpleDS.new_Algo(*args))

    def clone(self):
        return _SimpleDS.Algo_clone(self)

    def _print(self):
        return _SimpleDS.Algo__print(self)

    @staticmethod
    def classInfo():
        return _SimpleDS.Algo_classInfo()

# Register Algo in _SimpleDS:
_SimpleDS.Algo_swigregister(Algo)
class_name = cvar.class_name

def Algo_classInfo():
    return _SimpleDS.Algo_classInfo()

CPP_CODE_MSG_G = _SimpleDS.CPP_CODE_MSG_G
class Geometry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    POINT = _SimpleDS.Geometry_POINT
    CIRCLE = _SimpleDS.Geometry_CIRCLE
    __swig_destroy__ = _SimpleDS.delete_Geometry

    def draw(self):
        return _SimpleDS.Geometry_draw(self)

    @staticmethod
    def create(i):
        return _SimpleDS.Geometry_create(i)

    @staticmethod
    def destroy(p):
        return _SimpleDS.Geometry_destroy(p)

# Register Geometry in _SimpleDS:
_SimpleDS.Geometry_swigregister(Geometry)

def Geometry_create(i):
    return _SimpleDS.Geometry_create(i)

def Geometry_destroy(p):
    return _SimpleDS.Geometry_destroy(p)

class Point(Geometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def draw(self):
        return _SimpleDS.Point_draw(self)

    def width(self):
        return _SimpleDS.Point_width(self)
    __swig_destroy__ = _SimpleDS.delete_Point

    def __init__(self):
        _SimpleDS.Point_swiginit(self, _SimpleDS.new_Point())

# Register Point in _SimpleDS:
_SimpleDS.Point_swigregister(Point)

class Circle(Geometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def draw(self):
        return _SimpleDS.Circle_draw(self)

    def radius(self):
        return _SimpleDS.Circle_radius(self)
    __swig_destroy__ = _SimpleDS.delete_Circle

    def __init__(self):
        _SimpleDS.Circle_swiginit(self, _SimpleDS.new_Circle())

# Register Circle in _SimpleDS:
_SimpleDS.Circle_swigregister(Circle)

class B(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    i = property(_SimpleDS.B_i_get, _SimpleDS.B_i_set)

    def __init__(self):
        _SimpleDS.B_swiginit(self, _SimpleDS.new_B())
    __swig_destroy__ = _SimpleDS.delete_B

# Register B in _SimpleDS:
_SimpleDS.B_swigregister(B)

class A(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ii = property(_SimpleDS.A_ii_get, _SimpleDS.A_ii_set)

    def __init__(self, *args):
        _SimpleDS.A_swiginit(self, _SimpleDS.new_A(*args))
    __swig_destroy__ = _SimpleDS.delete_A

# Register A in _SimpleDS:
_SimpleDS.A_swigregister(A)


def getAii(a):
    return _SimpleDS.getAii(a)

def execute_op(arg1, arg2, op):
    return _SimpleDS.execute_op(arg1, arg2, op)

def addition(arg1, arg2):
    return _SimpleDS.addition(arg1, arg2)

def subtraction(arg1, arg2):
    return _SimpleDS.subtraction(arg1, arg2)

def multiplication(arg1, arg2):
    return _SimpleDS.multiplication(arg1, arg2)


